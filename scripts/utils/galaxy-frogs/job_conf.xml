<?xml version="1.0"?>
<job_conf>
    <plugins workers="4">
        <plugin id="slurm" type="runner" load="galaxy.jobs.runners.slurm:SlurmJobRunner">
            <param id="drmaa_library_path">/usr/lib/slurm-drmaa/lib/libdrmaa.so</param>
            <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_SLURM">true</param>
        </plugin>
        <plugin id="condor" type="runner" load="galaxy.jobs.runners.condor:CondorJobRunner">
            <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_CONDOR">true</param>
        </plugin>
        <plugin id="local" type="runner" load="galaxy.jobs.runners.local:LocalJobRunner"/>
        <plugin id="drmaa" type="runner" load="galaxy.jobs.runners.drmaa:DRMAAJobRunner">
            <!-- Different DRMs handle successfully completed jobs differently,
                 these options can be changed to handle such differences and
                 are explained in detail on the Galaxy wiki. Defaults are shown -->
            <param id="invalidjobexception_state">ok</param>
            <param id="invalidjobexception_retries">0</param>
            <param id="internalexception_state">ok</param>
            <param id="internalexception_retries">0</param>
        </plugin>
    </plugins>
    <!-- The default handler can be changed by specifying the GALAXY_HANDLERS_DEFAULT environment variable. -->
    <handlers default_from_environ="GALAXY_HANDLERS_DEFAULT" default="handlers">
              <handler id="handler0" tags="handlers"/>
            <handler id="handler1" tags="handlers"/>
          </handlers>
    <!-- The default destination can be changed by specifying the GALAXY_DESTINATIONS_DEFAULT environment variable. -->
    <destinations default_from_environ="GALAXY_DESTINATIONS_DEFAULT" default="slurm_cluster">
        <destination id="docker_dispatch" runner="dynamic">
            <!-- Allow different default destinations based on whether the tool
                 supports Docker or not. -->
            <param id="type">docker_dispatch</param>
            <param id="docker_destination_id" from_environ="GALAXY_DESTINATIONS_DOCKER_DEFAULT">slurm_cluster</param>
            <param id="default_destination_id" from_environ="GALAXY_DESTINATIONS_NO_DOCKER_DEFAULT">slurm_cluster</param>
        </destination>
        <!--destination id="singularity_dispatch" runner="dynamic">
            <param id="type">singularity_dispatch</param>
            <param id="singularity_destination_id" from_environ="GALAXY_DESTINATIONS_DOCKER_DEFAULT">slurm_cluster</param>
            <param id="default_destination_id" from_environ="GALAXY_DESTINATIONS_NO_DOCKER_DEFAULT">slurm_cluster</param>
        </destination-->
        <destination id="local_no_container" runner="local">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_LOCAL">true</param>




    </destination>        <destination id="local_docker" runner="local">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_LOCAL">true</param>

                    <param id="docker_enabled">true</param>
            <param id="docker_sudo" from_environ="GALAXY_DOCKER_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_DOCKER_VOLUMES_FROM to use. -->
            <param id="docker_volumes_from" from_environ="GALAXY_DOCKER_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="docker_volumes" from_environ="GALAXY_DOCKER_VOLUMES">$defaults</param>



    </destination>        <destination id="local_force_docker" runner="local">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_LOCAL">true</param>

                    <param id="docker_enabled">true</param>
            <param id="docker_sudo" from_environ="GALAXY_DOCKER_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_DOCKER_VOLUMES_FROM to use. -->
            <param id="docker_volumes_from" from_environ="GALAXY_DOCKER_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="docker_volumes" from_environ="GALAXY_DOCKER_VOLUMES">$defaults</param>
                            <param id="docker_default_container_id" from_environ="GALAXY_DOCKER_DEFAULT_CONTAINER">busybox:ubuntu-14.04</param>



    </destination>        <destination id="slurm_cluster" runner="slurm">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_SLURM">true</param>



                    <param id="nativeSpecification" from_environ="NATIVE_SPEC">--ntasks=1 --share</param>

    </destination>        <!-- Docker -->
        <destination id="slurm_cluster_docker" runner="slurm">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_SLURM">true</param>

                    <param id="docker_enabled">true</param>
            <param id="docker_sudo" from_environ="GALAXY_DOCKER_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_DOCKER_VOLUMES_FROM to use. -->
            <param id="docker_volumes_from" from_environ="GALAXY_DOCKER_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="docker_volumes" from_environ="GALAXY_DOCKER_VOLUMES">$defaults</param>


                    <param id="nativeSpecification" from_environ="NATIVE_SPEC">--ntasks=1 --share</param>

    </destination>        <destination id="slurm_cluster_force_docker" runner="slurm">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_SLURM">true</param>

                    <param id="docker_enabled">true</param>
            <param id="docker_sudo" from_environ="GALAXY_DOCKER_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_DOCKER_VOLUMES_FROM to use. -->
            <param id="docker_volumes_from" from_environ="GALAXY_DOCKER_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="docker_volumes" from_environ="GALAXY_DOCKER_VOLUMES">$defaults</param>
                            <param id="docker_default_container_id" from_environ="GALAXY_DOCKER_DEFAULT_CONTAINER">busybox:ubuntu-14.04</param>


                    <param id="nativeSpecification" from_environ="NATIVE_SPEC">--ntasks=1 --share</param>

    </destination>        <!-- Singularity -->
        <destination id="slurm_cluster_singularity" runner="slurm">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_SLURM">true</param>


                    <param id="singularity_enabled">true</param>
            <param id="singularity_sudo" from_environ="GALAXY_SINGULARITY_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_SINGULARITY_VOLUMES_FROM to use. -->
            <param id="singularity_volumes_from" from_environ="GALAXY_SINGULARITY_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="singularity_volumes" from_environ="GALAXY_SINGULARITY_VOLUMES">$defauls</param>


                    <param id="nativeSpecification" from_environ="NATIVE_SPEC">--ntasks=1 --share</param>

    </destination>
        <destination id="condor_cluster" runner="condor">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_CONDOR">true</param>



                    <param id="universe" from_environ="GALAXY_CONDOR_UNIVERSE">vanilla</param>

    </destination>        <destination id="condor_cluster_docker" runner="condor">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_CONDOR">true</param>

                    <param id="docker_enabled">true</param>
            <param id="docker_sudo" from_environ="GALAXY_DOCKER_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_DOCKER_VOLUMES_FROM to use. -->
            <param id="docker_volumes_from" from_environ="GALAXY_DOCKER_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="docker_volumes" from_environ="GALAXY_DOCKER_VOLUMES">$defaults</param>


                    <param id="universe" from_environ="GALAXY_CONDOR_UNIVERSE">vanilla</param>

    </destination>        <destination id="condor_cluster_force_docker" runner="condor">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_CONDOR">true</param>

                    <param id="docker_enabled">true</param>
            <param id="docker_sudo" from_environ="GALAXY_DOCKER_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_DOCKER_VOLUMES_FROM to use. -->
            <param id="docker_volumes_from" from_environ="GALAXY_DOCKER_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="docker_volumes" from_environ="GALAXY_DOCKER_VOLUMES">$defaults</param>
                            <param id="docker_default_container_id" from_environ="GALAXY_DOCKER_DEFAULT_CONTAINER">busybox:ubuntu-14.04</param>


                    <param id="universe" from_environ="GALAXY_CONDOR_UNIVERSE">vanilla</param>

    </destination>        <destination id="condor_docker_universe" runner="condor">
        <env file="/galaxy_venv/bin/activate"/>
                <param id="enabled" from_environ="GALAXY_RUNNERS_ENABLE_CONDOR">true</param>

                    <param id="docker_enabled">true</param>
            <param id="docker_sudo" from_environ="GALAXY_DOCKER_SUDO">False</param>
            <!-- The empty volumes from shouldn't affect Galaxy, set GALAXY_DOCKER_VOLUMES_FROM to use. -->
            <param id="docker_volumes_from" from_environ="GALAXY_DOCKER_VOLUMES_FROM"></param>
            <!-- For a stock Galaxy instance and traditional job runner $defaults will expand out as: $galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$default_file_path:rw -->
            <param id="docker_volumes" from_environ="GALAXY_DOCKER_VOLUMES">$defaults</param>
                            <param id="docker_default_container_id" from_environ="GALAXY_DOCKER_DEFAULT_CONTAINER">busybox:ubuntu-14.04</param>


                    <param id="universe" from_environ="GALAXY_CONDOR_UNIVERSE">docker</param>

    </destination>        <!-- Following destinations send to basic Condor runner if no Docker image is available
             otherwise they both use the Docker image - the first submits a normal Condor job
             that will run Docker on the resulting worker node and the second uses Condor's
             native Docker universe support.
        -->
        <destination id="condor_docker_cluster_dispatch" runner="dynamic">
        <param id="type">docker_dispatch</param>
        <param id="docker_destination_id">condor_cluster</param>
        <param id="default_destination_id">condor_cluster_docker</param>
    </destination>
        <destination id="condor_docker_universe_dispatch" runner="dynamic">
        <param id="type">docker_dispatch</param>
        <param id="docker_destination_id">condor_cluster</param>
        <param id="default_destination_id">condor_docker_universe</param>
    </destination>
    <destination id="FROGS_preprocess_job" runner="drmaa">
		<param id="galaxy_external_runjob_script">scripts/drmaa_external_runner.py</param>
		<param id="galaxy_external_killjob_script">scripts/drmaa_external_killer.py</param>
		<param id="galaxy_external_chown_script">scripts/external_chown_script.py</param>
		<param id="nativeSpecification">-clear -q galaxyq -l mem=5G -l h_vmem=13G -pe parallel_smp 12</param>
	</destination>
	<destination id="FROGS_clustering_job" runner="drmaa">
		<param id="galaxy_external_runjob_script">scripts/drmaa_external_runner.py</param>
		<param id="galaxy_external_killjob_script">scripts/drmaa_external_killer.py</param>
		<param id="galaxy_external_chown_script">scripts/external_chown_script.py</param>
		<param id="nativeSpecification">-clear -q galaxyq -l mem=3G -l h_vmem=10G -pe parallel_smp 16</param>
	</destination>
	<destination id="FROGS_remove_chimera_job" runner="drmaa">
		<param id="galaxy_external_runjob_script">scripts/drmaa_external_runner.py</param>
		<param id="galaxy_external_killjob_script">scripts/drmaa_external_killer.py</param>
		<param id="galaxy_external_chown_script">scripts/external_chown_script.py</param>
		<param id="nativeSpecification">-clear -q galaxyq -l mem=3G -l h_vmem=4G -pe parallel_smp 12</param>
	</destination>
	<destination id="FROGS_itsx_job" runner="drmaa">
		<param id="galaxy_external_runjob_script">scripts/drmaa_external_runner.py</param>
		<param id="galaxy_external_killjob_script">scripts/drmaa_external_killer.py</param>
		<param id="galaxy_external_chown_script">scripts/external_chown_script.py</param>
		<param id="nativeSpecification">-clear -q galaxyq -l mem=3G -l h_vmem=4G -pe parallel_smp 12</param>
	</destination>
	<destination id="FROGS_affiliation_OTU_job" runner="drmaa">
		<param id="galaxy_external_runjob_script">scripts/drmaa_external_runner.py</param>
		<param id="galaxy_external_killjob_script">scripts/drmaa_external_killer.py</param>
		<param id="galaxy_external_chown_script">scripts/external_chown_script.py</param>
		<param id="nativeSpecification">-clear -q galaxyq -l mem=7G -l h_vmem=10G -pe parallel_smp 30</param>
	</destination>
    </destinations>
    <limits>
    </limits>
    <tools>
        <tool id="my-tool" destination="my-tool-container"/>
        <tool id="FROGS_preprocess" destination="FROGS_preprocess_job"/>
        <tool id="FROGS_clustering" destination="FROGS_clustering_job"/>
        <tool id="FROGS_remove_chimera" destination="FROGS_remove_chimera_job"/>
        <tool id="FROGS_itsx" destination="FROGS_itsx_job"/>
        <tool id="FROGS_affiliation_OTU" destination="FROGS_affiliation_OTU_job"/>
    </tools>
</job_conf>